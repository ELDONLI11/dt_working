from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code


# wait for rotation sensor to fully initialize
wait(30, MSEC)


# Make random actually random
def initializeRandomSeed():
    wait(100, MSEC)
    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()
    urandom.seed(int(random))
      
# Set random seed 
initializeRandomSeed()


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")

#endregion VEXcode Generated Robot Configuration
 
# ------------------------------------------
#
#   Project:      VEXcode Project
#   Author:       VEX
#   Created:
#   Description:  VEXcode V5 Python Project
#
# ------------------------------------------
 
# Library imports
from vex import *
 
# Begin project code
 
#INITIALIZING
Mogo = DigitalOut(brain.three_wire_port.a)
IntakePiston = DigitalOut(brain.three_wire_port.b)
controller_1 = Controller(PRIMARY)
# i added a comment!
left_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)
left_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)
left_motor_c = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)
 
right_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_6_1, False)
right_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_6_1, False)
right_motor_c = Motor(Ports.PORT13, GearSetting.RATIO_6_1, False)
 
left_drive_smart = MotorGroup(left_motor_a, left_motor_b, left_motor_c)
right_drive_smart = MotorGroup(right_motor_a, right_motor_b, right_motor_c)
"""
left_drive_smart.set_stopping(HOLD)
right_drive_smart.set_stopping(HOLD)
"""

drivetrain = DriveTrain(left_drive_smart, right_drive_smart, 219.44, 295, 40, MM, 1)
 
Intake = Motor(Ports.PORT10, GearSetting.RATIO_6_1, False)
IntakeSmall = Motor(Ports.PORT9, GearSetting.RATIO_6_1, True)
 
#gyro start
gyro = Inertial(Ports.PORT19)
gyro.set_rotation(0, DEGREES)
gyro.set_heading(0, DEGREES)
 
gyro.calibrate()
 
#list definitions
pos_list = [(3.385, 110.743), (5.289, 111.357), (7.196, 111.958), (9.109, 112.541), (11.03, 113.097), (12.956, 113.638), (14.887, 114.157), (16.826, 114.647), (18.77, 115.119), (20.719, 115.568), (22.675, 115.983), (24.636, 116.375), (26.602, 116.743), (28.574, 117.078), (30.551, 117.379), (32.532, 117.651), (34.518, 117.892), (36.507, 118.1), (38.5, 118.263), (40.496, 118.39), (42.494, 118.479), (44.493, 118.528), (46.493, 118.534), (48.492, 118.496), (50.491, 118.411), (52.486, 118.275), (54.477, 118.087), (56.463, 117.847), (58.441, 117.553), (60.41, 117.204), (62.368, 116.796), (64.313, 116.33), (66.242, 115.803), (68.153, 115.215), (70.044, 114.564), (71.911, 113.846), (73.751, 113.064), (75.564, 112.218), (77.345, 111.309), (79.093, 110.338), (80.805, 109.305), (82.48, 108.212), (84.115, 107.061), (85.704, 105.846), (87.249, 104.577), (88.75, 103.255), (90.206, 101.884), (91.616, 100.466), (92.979, 99.003), (94.292, 97.494), (95.557, 95.945), (96.775, 94.359), (97.948, 92.739), (99.076, 91.088), (100.159, 89.407), (101.199, 87.698), (102.192, 85.962), (103.144, 84.203), (104.055, 82.423), (104.927, 80.623), (105.761, 78.806), (106.559, 76.972), (107.32, 75.122), (108.047, 73.259), (108.741, 71.384), (109.403, 69.496), (110.033, 67.598), (110.632, 65.69), (111.203, 63.773), (111.745, 61.848), (112.261, 59.916), (112.751, 57.977), (113.216, 56.032), (113.657, 54.081), (114.075, 52.125), (114.471, 50.165), (114.845, 48.2), (115.199, 46.232), (115.533, 44.26), (115.847, 42.285), (116.143, 40.307), (116.421, 38.326), (116.681, 36.343), (116.926, 34.358), (117.154, 32.371), (117.366, 30.382), (117.564, 28.392), (117.747, 26.401), (117.916, 24.408), (118.072, 22.414), (118.215, 20.419), (118.345, 18.423), (118.464, 16.427), (118.571, 14.43), (118.667, 12.432), (118.752, 10.434), (118.827, 8.435), (118.892, 6.436), (118.948, 4.437), (118.994, 2.438), (119.032, 0.438), (119.062, -1.562), (118.923, -3.556), (118.753, -5.549), (118.568, -7.54), (118.371, -9.53), (118.166, -11.52), (117.943, -13.507), (117.709, -15.494), (117.466, -17.479), (117.202, -19.461), (116.927, -21.442), (116.641, -23.422), (116.335, -25.398), (116.014, -27.372), (115.681, -29.344), (115.33, -31.313), (114.959, -33.278), (114.574, -35.241), (114.173, -37.2), (113.751, -39.155), (113.309, -41.106), (112.849, -43.052), (112.371, -44.994), (111.873, -46.931), (111.349, -48.861), (110.805, -50.786), (110.239, -52.704), (109.651, -54.615), (109.039, -56.52), (108.404, -58.416), (107.74, -60.303), (107.05, -62.18), (106.334, -64.047), (105.591, -65.904), (104.82, -67.749), (104.02, -69.582), (103.19, -71.402), (102.33, -73.207), (101.439, -74.998), (100.515, -76.772), (99.56, -78.529), (98.571, -80.267), (97.548, -81.986), (96.492, -83.684), (95.401, -85.36), (94.275, -87.013), (93.114, -88.641), (91.917, -90.244), (90.686, -91.819), (89.415, -93.364), (88.11, -94.879), (86.77, -96.364), (85.395, -97.816), (83.987, -99.236), (82.545, -100.622), (81.067, -101.969), (79.557, -103.28), (78.016, -104.555), (76.446, -105.794), (74.846, -106.994), (73.215, -108.152), (71.559, -109.273), (69.878, -110.356), (68.173, -111.401), (66.442, -112.404), (64.691, -113.369), (62.919, -114.298), (61.13, -115.191), (59.321, -116.044), (57.496, -116.861), (55.656, -117.645), (53.802, -118.396), (51.935, -119.112), (50.055, -119.795), (48.165, -120.449), (46.265, -121.073), (44.356, -121.67), (42.438, -122.237), (40.513, -122.777), (38.58, -123.294), (36.642, -123.787), (34.698, -124.258), (32.749, -124.706), (30.795, -125.133), (28.838, -125.542), (26.876, -125.932), (24.911, -126.306), (22.944, -126.664), (20.973, -127.006), (19.0, -127.334), (17.025, -127.65), (15.049, -127.954), (13.07, -128.247), (11.09, -128.53), (9.109, -128.804), (7.127, -129.07), (5.144, -129.328), (3.16, -129.579), (0.279, -129.936)]
#[(3.385, 110.743), (5.289, 111.357), (7.196, 111.958), (9.109, 112.541), (11.03, 113.097), (12.956, 113.638), (14.887, 114.157), (16.826, 114.647), (18.77, 115.119), (20.719, 115.568), (22.675, 115.983), (24.636, 116.375), (26.602, 116.743), (28.574, 117.078), (30.551, 117.379), (32.532, 117.651), (34.518, 117.892), (36.507, 118.1), (38.5, 118.263), (40.496, 118.39), (42.494, 118.479), (44.493, 118.528), (46.493, 118.534), (48.492, 118.496), (50.491, 118.411), (52.486, 118.275), (54.477, 118.087), (56.463, 117.847), (58.441, 117.553), (60.41, 117.204), (62.368, 116.796), (64.313, 116.33), (66.242, 115.803), (68.153, 115.215), (70.044, 114.564), (71.911, 113.846), (73.751, 113.064), (75.564, 112.218), (77.345, 111.309), (79.093, 110.338), (80.805, 109.305), (82.48, 108.212), (84.115, 107.061), (85.704, 105.846), (87.249, 104.577), (88.75, 103.255), (90.206, 101.884), (91.616, 100.466), (92.979, 99.003), (94.292, 97.494), (95.557, 95.945), (96.775, 94.359), (97.948, 92.739), (99.076, 91.088), (100.159, 89.407), (101.199, 87.698), (102.192, 85.962), (103.144, 84.203), (104.055, 82.423), (104.927, 80.623), (105.761, 78.806), (106.559, 76.972), (107.32, 75.122), (108.047, 73.259), (108.741, 71.384), (109.403, 69.496), (110.033, 67.598), (110.632, 65.69), (111.203, 63.773), (111.745, 61.848), (112.261, 59.916), (112.751, 57.977), (113.216, 56.032), (113.657, 54.081), (114.075, 52.125), (114.471, 50.165), (114.845, 48.2), (115.199, 46.232), (115.533, 44.26), (115.847, 42.285), (116.143, 40.307), (116.421, 38.326), (116.681, 36.343), (116.926, 34.358), (117.154, 32.371), (117.366, 30.382), (117.564, 28.392), (117.747, 26.401), (117.916, 24.408), (118.072, 22.414), (118.215, 20.419), (118.345, 18.423), (118.464, 16.427), (118.571, 14.43), (118.667, 12.432), (118.752, 10.434), (118.827, 8.435), (118.892, 6.436), (118.948, 4.437), (118.994, 2.438), (119.032, 0.438), (119.062, -1.562), (118.923, -3.556), (118.753, -5.549), (118.568, -7.54), (118.371, -9.53), (118.166, -11.52), (117.943, -13.507), (117.709, -15.494), (117.466, -17.479), (117.202, -19.461), (116.927, -21.442), (116.641, -23.422), (116.335, -25.398), (116.014, -27.372), (115.681, -29.344), (115.33, -31.313), (114.959, -33.278), (114.574, -35.241), (114.173, -37.2), (113.751, -39.155), (113.309, -41.106), (112.849, -43.052), (112.371, -44.994), (111.873, -46.931), (111.349, -48.861), (110.805, -50.786), (110.239, -52.704), (109.651, -54.615), (109.039, -56.52), (108.404, -58.416), (107.74, -60.303), (107.05, -62.18), (106.334, -64.047), (105.591, -65.904), (104.82, -67.749), (104.02, -69.582), (103.19, -71.402), (102.33, -73.207), (101.439, -74.998), (100.515, -76.772), (99.56, -78.529), (98.571, -80.267), (97.548, -81.986), (96.492, -83.684), (95.401, -85.36), (94.275, -87.013), (93.114, -88.641), (91.917, -90.244), (90.686, -91.819), (89.415, -93.364), (88.11, -94.879), (86.77, -96.364), (85.395, -97.816), (83.987, -99.236), (82.545, -100.622), (81.067, -101.969), (79.557, -103.28), (78.016, -104.555), (76.446, -105.794), (74.846, -106.994), (73.215, -108.152), (71.559, -109.273), (69.878, -110.356), (68.173, -111.401), (66.442, -112.404), (64.691, -113.369), (62.919, -114.298), (61.13, -115.191), (59.321, -116.044), (57.496, -116.861), (55.656, -117.645), (53.802, -118.396), (51.935, -119.112), (50.055, -119.795), (48.165, -120.449), (46.265, -121.073), (44.356, -121.67), (42.438, -122.237), (40.513, -122.777), (38.58, -123.294), (36.642, -123.787), (34.698, -124.258), (32.749, -124.706), (30.795, -125.133), (28.838, -125.542), (26.876, -125.932), (24.911, -126.306), (22.944, -126.664), (20.973, -127.006), (19.0, -127.334), (17.025, -127.65), (15.049, -127.954), (13.07, -128.247), (11.09, -128.53), (9.109, -128.804), (7.127, -129.07), (5.144, -129.328), (3.16, -129.579), (1.175, -129.826), (-0.819, -129.936), (-2.819, -129.936), (-4.819, -129.936), (-6.819, -129.936), (-8.819, -129.936), (-10.819, -129.936), (-12.819, -129.936), (-14.819, -129.936), (-16.819, -129.936), (-18.819, -129.936), (-20.819, -129.936), (-22.819, -129.936), (-24.819, -129.936), (-26.819, -129.936), (-28.819, -129.936), (-30.819, -129.936), (-32.819, -129.936), (-34.819, -129.936), (-36.819, -129.936), (-38.819, -129.936), (-40.819, -129.936), (-42.819, -129.936), (-44.819, -129.936), (-46.819, -129.936), (-48.819, -129.936), (-50.819, -129.936), (-52.819, -129.936), (-54.819, -129.936), (-56.819, -129.936), (-58.819, -129.936), (-60.819, -129.936), (-62.819, -129.936), (-64.819, -129.936), (-66.819, -129.936), (-68.819, -129.936), (-70.819, -129.936), (-72.819, -129.936), (-74.819, -129.936), (-76.819, -129.936), (-78.819, -129.936), (-80.819, -129.936), (-82.819, -129.936), (-84.819, -129.936), (-86.819, -129.936), (-88.819, -129.936), (-90.819, -129.936), (-92.819, -129.936), (-94.819, -129.936), (-96.819, -129.936), (-98.819, -129.936), (-100.819, -129.936), (-102.819, -129.936), (-104.819, -129.936), (-106.819, -129.936), (-108.819, -129.936), (-110.819, -129.936), (-111.497, -128.637), (-111.462, -126.638), (-111.427, -124.638), (-111.392, -122.638), (-111.357, -120.638), (-111.322, -118.639), (-111.287, -116.639), (-111.252, -114.639), (-111.216, -112.64), (-111.181, -110.64), (-111.146, -108.64), (-111.111, -106.641), (-111.076, -104.641), (-111.041, -102.641), (-111.006, -100.642), (-110.971, -98.642), (-110.936, -96.642), (-110.901, -94.642), (-110.866, -92.643), (-110.831, -90.643), (-110.795, -88.643), (-110.76, -86.644), (-110.725, -84.644), (-110.69, -82.644), (-110.655, -80.645), (-110.62, -78.645), (-110.585, -76.645), (-110.55, -74.646), (-110.515, -72.646), (-110.48, -70.646), (-110.445, -68.646), (-110.41, -66.647), (-110.374, -64.647), (-110.339, -62.647), (-110.304, -60.648), (-110.269, -58.648), (-110.234, -56.648), (-110.199, -54.649), (-110.164, -52.649), (-110.129, -50.649), (-110.094, -48.65), (-110.059, -46.65), (-110.024, -44.65), (-109.989, -42.65), (-109.953, -40.651), (-109.918, -38.651), (-109.883, -36.651), (-109.848, -34.652), (-109.813, -32.652), (-109.778, -30.652), (-109.743, -28.653), (-109.708, -26.653), (-109.673, -24.653), (-109.638, -22.654), (-109.603, -20.654), (-109.568, -18.654), (-109.532, -16.654), (-109.497, -14.655), (-109.462, -12.655), (-109.427, -10.655), (-109.392, -8.656), (-109.357, -6.656), (-109.322, -4.656), (-109.287, -2.657), (-109.252, -0.657), (-109.217, 1.343), (-109.191, 2.826), (-109.191, 2.826)]

passed_through_list = []
 
 
wheel_circumference = 8.6393798
feet_to_unit = 2.5
gear_ratio = 3/4
tolerance = 1
lookahead = 1
current_x = pos_list[0][0]
current_y = pos_list[0][1]
previous_right_encoder = 0
previous_left_encoder = 0
forward_velocity = 35
turn_velocity_k = 1
left_velocity = 0
right_velocity = 0
#forward_velocity/100
 
def leftEncoder():
    return (left_motor_a.position(DEGREES) + left_motor_b.position(DEGREES) + left_motor_c.position(DEGREES)) / 3
 
def rightEncoder():
    return (right_motor_a.position(DEGREES) + right_motor_b.position(DEGREES) + right_motor_c.position(DEGREES)) / 3
 
def update_position():
    global current_x, current_y, current_angle, previous_left_encoder, previous_right_encoder
   
    # Calculate the distance traveled by each wheel
    left_encoder = ((leftEncoder() / 360) * wheel_circumference * gear_ratio) * feet_to_unit
    right_encoder = ((rightEncoder() / 360) * wheel_circumference * gear_ratio) * feet_to_unit
    delta_left = left_encoder - previous_left_encoder
    delta_right = right_encoder - previous_right_encoder
   
    # Update previous encoder values
    previous_left_encoder = left_encoder
    previous_right_encoder = right_encoder
   
    current_angle = math.radians(gyro.heading(DEGREES))
   
    # Calculate the robot's linear change
    delta_d = (delta_left + delta_right) / 2
   
    current_x += delta_d * math.cos(current_angle)
    current_y += delta_d * math.sin(current_angle)
 
    return current_x, current_y
 
 
def calculate_lookahead_point(current_x, current_y, n):
    global pos_list

    if len(pos_list) == 0:
        return "done"

    min_distance = float('inf')
    min_index = -1  # To keep track of the nearest valid point index

    num_points = min(n, len(pos_list))  # Number of points to check

    for i in range(num_points):
        dx = pos_list[i][0] - current_x
        dy = pos_list[i][1] - current_y
        distance = math.sqrt(dx**2 + dy**2)

        if distance >= lookahead and distance < min_distance:
            min_distance = distance
            min_index = i

    if min_index >= 0:
        # Pop all points before the nearest valid point
        pos_list = pos_list[min_index:]
    else:
        # Remove the first point and try again
        pos_list.pop(0)
        print("popped")
 
def calculate_drive_speeds(current_x, current_y, forward_velocity, turn_velocity_k):
    global pos_list
    current_angle = math.radians(gyro.heading(DEGREES))
    dx = pos_list[0][0] - current_x
    dy = pos_list[0][1] - current_y
 
    point_angle_diff = math.atan2(dy, dx) - current_angle
 
    if point_angle_diff > math.pi:
        point_angle_diff = point_angle_diff - 2*math.pi
 
    if point_angle_diff < math.pi:
        point_angle_diff = point_angle_diff + 2*math.pi
 
    left_velocity = forward_velocity + (point_angle_diff)*turn_velocity_k
    right_velocity = forward_velocity - (point_angle_diff)*turn_velocity_k

    #return 0,0
 
    return max(min(left_velocity, 100), -100), max(min(right_velocity, 100), -100)
 
 
wait(3, SECONDS)
 
running = True

left_drive_smart.spin(FORWARD)
right_drive_smart.spin(FORWARD)
while running:
    print("x: "+ str(current_x)+" y: " + str(current_y) + " pos x: " + str(pos_list[0][0]) + "pos y: " + str(pos_list[0][1]) + "size: " + str(len(pos_list)))
    #print("left vel: " +str(left_velocity) +" right_vel: " +str(right_velocity))
    #print()
    wait(.05,SECONDS)
    current_x, current_y = update_position()
    calculate_lookahead_point(current_x, current_y, 5)
    if pos_list == []:
        running = False
        break
    left_velocity, right_velocity = calculate_drive_speeds(current_x, current_y, forward_velocity, turn_velocity_k)
    left_drive_smart.set_velocity(left_velocity, PERCENT)
    right_drive_smart.set_velocity(right_velocity, PERCENT)
 
 
    #print(str(current_x))
    #print(str(current_y))
 


 
left_drive_smart.set_velocity(0, PERCENT)
right_drive_smart.set_velocity(0, PERCENT)