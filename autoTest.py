from vex import *
import time


# Initialize devices
brain = Brain()
controller_1 = Controller(PRIMARY)
left_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)
left_motor_b = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)
left_motor_c = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True)
 
right_motor_a = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)
right_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_6_1, False)
right_motor_c = Motor(Ports.PORT17, GearSetting.RATIO_6_1, False)
 
left_drive_smart = MotorGroup(left_motor_a, left_motor_b, left_motor_c)
right_drive_smart = MotorGroup(right_motor_a, right_motor_b, right_motor_c)
High_scoring = Motor(Ports.PORT20)
intake_lower = Motor(Ports.PORT1)
intake_upper = Motor(Ports.PORT13)
mogo_p = DigitalOut(brain.three_wire_port.f)
donker = DigitalOut(brain.three_wire_port.h)
intake_p = DigitalOut(brain.three_wire_port.d)
rotational_sensor = Rotation(Ports.PORT19, False)
rotational_sensor.set_position(0, DEGREES)

# Constants
MSEC_PER_SEC = 1000

# define an enum for intake state
class IntakeState:
    STOPPED = 0
    RUNNING = 1
    STALLED = 2
    FIXINGSTALL = 3

intake_state = IntakeState.STOPPED

# Global variables
reverse_drive = True
high_scoring_running = False
current_direction = FORWARD
high_scoring_mode = False
# Constants
STALL_THRESHOLD = 0       # Adjust as needed
STALL_COUNT = 50
RETRY_LIMIT = 10
MSEC_PER_SEC = 1000
# Define constants for the target angles
HIGH_SCORE_TARGET_ANGLE_SCORE = 450
HIGH_SCORE_TARGET_ANGLE_WAIT = 150
HIGH_SCORE_TARGET_ANGLE_CAPTURE = 45
HIGH_SCORE_TARGET_ANGLE_DOWN = 0
# Global variables
retry_count = 0
consecutive_stall_count = 0
high_scoring_running = False
high_score_stall = False  # Set this accordingly in your main code if needed
high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_DOWN

# Function to set the state of the high scoring motor
def adjust_high_scoring_motor_position():
    global high_score_target_angle

    High_scoring.set_stopping(BRAKE)
    High_scoring.spin_to_position(high_score_target_angle, DEGREES, 30, PERCENT, False)


# Function to set the state of the intake motor
def set_intake_motor_state(direction=FORWARD):
    global intake_state, current_direction
    if intake_state == IntakeState.RUNNING or intake_state == IntakeState.FIXINGSTALL:
        intake_lower.set_velocity(85, PERCENT)
        intake_upper.set_velocity(85, PERCENT)
        if intake_state == IntakeState.FIXINGSTALL:
            intake_upper.spin(direction)
            intake_lower.stop()
        else:
            intake_upper.spin(REVERSE if direction == FORWARD else FORWARD)
        intake_lower.spin(direction)
        current_direction = direction
    else:
        intake_lower.stop()
        intake_upper.stop()

# Stall detection and handling for the intake motor
def stall_detection_and_handling():
    global intake_state, consecutive_stall_count, retry_count, high_score_stall, high_score_target_angle, high_scoring_running
    global current_direction
    if intake_state == IntakeState.RUNNING or intake_state == IntakeState.STALLED:
        current_velocity = intake_upper.velocity(PERCENT)
        if abs(current_velocity) <= STALL_THRESHOLD:
            #print("Stalled" + str(consecutive_stall_count))
            consecutive_stall_count += 1
        else:
            consecutive_stall_count = 0

        if consecutive_stall_count >= STALL_COUNT:
            #print("Unstaling")
            intake_state = IntakeState.FIXINGSTALL
            # This state will change upper motor in opposite direction
            set_intake_motor_state(current_direction)
            if high_scoring_running:
                high_score_stall = True
                high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_WAIT
                adjust_high_scoring_motor_position()
                high_scoring_running = False
            consecutive_stall_count = 0
            retry_count = RETRY_LIMIT
    else:
        consecutive_stall_count = 0
    if intake_state == IntakeState.FIXINGSTALL:
        if retry_count == 0:
            if high_score_stall:
                high_score_stall = False
                intake_state = IntakeState.STOPPED
                set_intake_motor_state(FORWARD)
            else:
                print("Fixed")
                intake_state = IntakeState.RUNNING
                set_intake_motor_state(current_direction)
        else:
            #print("Retrying")
            retry_count -= 1


# wait for rotation sensor to fully initialize
wait(30, MSEC)

#Paths
red_left_tomogo = [(-151.774, 126.162), (-132.813, 121.614), (-116.614, 109.405), (-101.657, 95.657), (-87.22, 81.358), (-72.93, 66.912), (-62.038, 56.275)]

# Testing paths
decreasing_x = [(150,00),(100,0), (50,0), (0,0)]
increasing_x = [(0,00),(50,0), (100,0), (0,0)]
#red_left_tomogo = [(-57.389, 70.195), (-57.595, 85.434), (-58.117, 100.664), (-58.991, 115.879), (-59.156, 118.226)]
red_left_totower = [(-56.005, 109.686), (-48.833, 90.678), (-42.278, 71.445), (-35.999, 52.12), (-28.954, 28.954), (-28.954, 28.954)]
red_left_tofirststack = [(-66.948, 66.505), (-64.771, 81.588), (-63.049, 96.73), (-60.55, 111.758), (-59.156, 118.226), (-59.156, 118.226)]
#[(-66.948, 66.505), (-65.755, 81.698), (-63.714, 96.795), (-60.605, 111.714), (-59.156, 118.226), (-59.156, 118.226)]
#[(-66.948, 66.505), (-74.311, 79.794), (-75.997, 94.745), (-69.597, 108.353), (-59.156, 118.226), (-59.156, 118.226)]
red_left_lasttwo = [(-69.531, 148.924), (-57.392, 152.459), (-44.93, 151.127), (-34.453, 144.166), (-27.05, 133.892), (-21.979, 122.263), (-18.617, 110.025), (-16.793, 97.468), (-16.696, 94.821), (-16.696, 94.821)]
#red_left_tofirststack = [ (-59.156, 118.226)]
blue_right_tomogo = [(148.309, 121.108), (131.65, 109.473), (114.99, 97.838), (98.331, 86.203), (81.672, 74.568), (57.543, 57.716), (57.543, 57.716)]
blue_right_tofirststack = [(58.984, 75.725), (58.984, 96.045), (58.984, 101.595), (58.984, 118.947), (58.984, 118.947)]
blue_right_totower =  [(62.345, 117.716), (46.169, 80.438), (38.288, 61.709), (30.311, 43.02), (25.572, 34.448), (25.572, 34.448)]
start_pos_size = -1


test_circle = [(-124.731, -1.053), (-124.704, -3.052), (-124.654, -5.052), (-124.579, -7.05), (-124.479, -9.048), (-124.353, -11.044), (-124.201, -13.038), (-124.019, -15.03), (-123.81, -17.019), (-123.574, -19.005), (-123.311, -20.987), (-123.021, -22.966), (-122.704, -24.941), (-122.359, -26.911), (-121.983, -28.875), (-121.577, -30.833), (-121.144, -32.786), (-120.681, -34.732), (-120.19, -36.67), (-119.671, -38.602), (-119.122, -40.525), (-118.544, -42.439), (-117.936, -44.345), (-117.3, -46.241), (-116.634, -48.127), (-115.939, -50.002), (-115.213, -51.866), (-114.458, -53.718), (-113.673, -55.557), (-112.86, -57.384), (-112.017, -59.198), (-111.145, -60.998), (-110.245, -62.784), (-109.316, -64.555), (-108.359, -66.311), (-107.374, -68.051), (-106.36, -69.775), (-105.319, -71.483), (-104.25, -73.173), (-103.154, -74.846), (-102.031, -76.501), (-100.881, -78.137), (-99.705, -79.755), (-98.502, -81.353), (-97.274, -82.931), (-96.021, -84.49), (-94.743, -86.028), (-93.44, -87.545), (-92.112, -89.041), (-90.761, -90.516), (-89.387, -91.969), (-87.989, -93.399), (-86.569, -94.807), (-85.126, -96.193), (-83.662, -97.555), (-82.176, -98.894), (-80.669, -100.208), (-79.141, -101.499), (-77.593, -102.765), (-76.025, -104.007), (-74.439, -105.224), (-72.833, -106.417), (-71.209, -107.584), (-69.567, -108.726), (-67.908, -109.842), (-66.231, -110.933), (-64.538, -111.997), (-62.829, -113.036), (-61.104, -114.048), (-59.364, -115.034), (-57.609, -115.993), (-55.84, -116.926), (-54.056, -117.831), (-52.259, -118.709), (-50.449, -119.558), (-48.625, -120.379), (-46.789, -121.172), (-44.941, -121.938), (-43.082, -122.675), (-41.212, -123.384), (-39.332, -124.064), (-37.441, -124.716), (-35.54, -125.339), (-33.631, -125.933), (-31.712, -126.497), (-29.785, -127.032), (-27.849, -127.536), (-25.906, -128.009), (-23.956, -128.452), (-21.999, -128.865), (-20.036, -129.247), (-18.067, -129.598), (-16.093, -129.918), (-14.114, -130.207), (-12.131, -130.465), (-10.143, -130.691), (-8.153, -130.882), (-6.159, -131.04), (-4.163, -131.166), (-2.165, -131.259), (-0.166, -131.324), (1.833, -131.372), (3.833, -131.407), (5.833, -131.43), (7.833, -131.44), (9.833, -131.436), (11.833, -131.417), (13.832, -131.385), (15.832, -131.338), (17.831, -131.276), (19.829, -131.199), (21.827, -131.107), (23.824, -130.998), (25.82, -130.873), (27.815, -130.732), (29.809, -130.573), (31.801, -130.396), (33.792, -130.202), (35.78, -129.988), (37.767, -129.756), (39.751, -129.504), (41.732, -129.233), (43.711, -128.94), (45.686, -128.627), (47.658, -128.292), (49.625, -127.934), (51.589, -127.554), (53.548, -127.151), (55.502, -126.724), (57.45, -126.272), (59.392, -125.795), (61.328, -125.292), (63.257, -124.763), (65.178, -124.206), (67.091, -123.622), (68.994, -123.01), (70.889, -122.368), (72.772, -121.696), (74.645, -120.994), (76.506, -120.26), (78.353, -119.495), (80.187, -118.698), (82.007, -117.867), (83.81, -117.003), (85.597, -116.105), (87.366, -115.172), (89.116, -114.204), (90.846, -113.2), (92.555, -112.161), (94.241, -111.085), (95.903, -109.973), (97.54, -108.824), (99.15, -107.638), (100.733, -106.415), (102.286, -105.156), (103.809, -103.86), (105.301, -102.528), (106.759, -101.159), (108.183, -99.755), (109.572, -98.316), (110.924, -96.843), (112.239, -95.336), (113.516, -93.796), (114.753, -92.224), (115.949, -90.622), (117.105, -88.99), (118.22, -87.33), (119.293, -85.642), (120.323, -83.928), (121.312, -82.189), (122.257, -80.427), (123.161, -78.643), (124.023, -76.838), (124.842, -75.014), (125.621, -73.172), (126.358, -71.313), (127.056, -69.439), (127.714, -67.55), (128.331, -65.648), (128.905, -63.732), (129.441, -61.805), (129.941, -59.869), (130.406, -57.924), (130.836, -55.971), (131.231, -54.01), (131.585, -52.042), (131.907, -50.068), (132.198, -48.089), (132.461, -46.107), (132.688, -44.12), (132.882, -42.129), (133.05, -40.136), (133.193, -38.141), (133.302, -36.144), (133.383, -34.146), (133.443, -32.147), (133.476, -30.147), (133.478, -28.147), (133.462, -26.148), (133.423, -24.148), (133.354, -22.149), (133.269, -20.151), (133.161, -18.154), (133.028, -16.158), (132.882, -14.164), (132.709, -12.171), (132.622, -10.175), (132.598, -8.175), (132.567, -6.175), (132.53, -4.175), (132.488, -2.176), (132.44, -0.176), (132.382, 1.823), (132.318, 3.822), (132.246, 5.821), (132.167, 7.819), (132.077, 9.817), (131.978, 11.814), (131.87, 13.812), (131.753, 15.808), (131.624, 17.804), (131.483, 19.799), (131.33, 21.793), (131.165, 23.786), (130.988, 25.778), (130.797, 27.769), (130.59, 29.758), (130.367, 31.746), (130.128, 33.732), (129.872, 35.715), (129.598, 37.696), (129.306, 39.675), (128.994, 41.65), (128.661, 43.622), (128.306, 45.591), (127.928, 47.555), (127.526, 49.514), (127.098, 51.467), (126.643, 53.415), (126.16, 55.356), (125.648, 57.289), (125.105, 59.214), (124.53, 61.13), (123.922, 63.035), (123.279, 64.928), (122.599, 66.809), (121.883, 68.677), (121.127, 70.528), (120.333, 72.364), (119.497, 74.181), (118.62, 75.978), (117.7, 77.754), (116.732, 79.504), (115.72, 81.229), (114.664, 82.927), (113.563, 84.597), (112.418, 86.236), (111.228, 87.843), (109.99, 89.414), (108.707, 90.948), (107.382, 92.446), (106.016, 93.907), (104.609, 95.328), (103.164, 96.71), (101.677, 98.048), (100.155, 99.345), (98.598, 100.601), (97.009, 101.815), (95.39, 102.989), (93.742, 104.122), (92.068, 105.216), (90.368, 106.269), (88.644, 107.284), (86.898, 108.258), (85.131, 109.196), (83.346, 110.098), (81.544, 110.966), (79.727, 111.8), (77.894, 112.601), (76.048, 113.371), (74.19, 114.111), (72.32, 114.821), (70.44, 115.502), (68.55, 116.156), (66.651, 116.784), (64.744, 117.387), (62.83, 117.967), (60.91, 118.525), (58.983, 119.061), (57.051, 119.577), (55.112, 120.069), (53.169, 120.542), (51.222, 120.998), (49.27, 121.436), (47.315, 121.859), (45.357, 122.262), (43.394, 122.649), (41.43, 123.022), (39.462, 123.383), (37.492, 123.727), (35.519, 124.057), (33.545, 124.375), (31.569, 124.683), (29.59, 124.975), (27.61, 125.257), (25.629, 125.53), (23.646, 125.789), (21.662, 126.039), (19.676, 126.281), (17.689, 126.511), (15.702, 126.732), (13.713, 126.947), (11.724, 127.149), (9.733, 127.345), (7.742, 127.534), (5.75, 127.713), (3.758, 127.885), (1.764, 128.04), (-0.232, 128.175), (-2.228, 128.296), (-4.226, 128.385), (-6.225, 128.459), (-8.224, 128.512), (-10.224, 128.535), (-12.224, 128.542), (-14.224, 128.525), (-16.223, 128.477), (-18.222, 128.411), (-20.22, 128.321), (-22.216, 128.197), (-24.21, 128.051), (-26.203, 127.883), (-28.193, 127.68), (-30.18, 127.449), (-32.163, 127.194), (-34.143, 126.913), (-36.117, 126.592), (-38.087, 126.245), (-40.051, 125.869), (-42.01, 125.465), (-43.961, 125.024), (-45.904, 124.549), (-47.838, 124.044), (-49.765, 123.507), (-51.682, 122.938), (-53.589, 122.334), (-55.483, 121.691), (-57.365, 121.015), (-59.234, 120.304), (-61.09, 119.56), (-62.932, 118.78), (-64.758, 117.965), (-66.569, 117.115), (-68.361, 116.227), (-70.134, 115.302), (-71.888, 114.34), (-73.622, 113.344), (-75.335, 112.312), (-77.026, 111.245), (-78.694, 110.142), (-80.339, 109.005), (-81.96, 107.833), (-83.555, 106.627), (-85.124, 105.387), (-86.666, 104.113), (-88.181, 102.807), (-89.667, 101.469), (-91.124, 100.1), (-92.552, 98.699), (-93.95, 97.269), (-95.317, 95.809), (-96.653, 94.321), (-97.957, 92.804), (-99.229, 91.261), (-100.469, 89.692), (-101.677, 88.098), (-102.851, 86.479), (-103.99, 84.835), (-105.096, 83.169), (-106.168, 81.481), (-107.207, 79.772), (-108.211, 78.042), (-109.182, 76.294), (-110.119, 74.527), (-111.022, 72.742), (-111.89, 70.941), (-112.721, 69.121), (-113.518, 67.287), (-114.28, 65.438), (-115.009, 63.576), (-115.703, 61.7), (-116.362, 59.812), (-116.982, 57.91), (-117.569, 55.998), (-118.12, 54.076), (-118.638, 52.144), (-119.115, 50.202), (-119.556, 48.251), (-119.962, 46.293), (-120.33, 44.327), (-120.657, 42.354), (-120.947, 40.375), (-121.197, 38.391), (-121.404, 36.402), (-121.573, 34.409), (-121.692, 32.413), (-121.77, 30.414), (-121.795, 28.414), (-121.774, 26.415), (-121.695, 24.416), (-121.558, 22.421), (-121.36, 20.431), (-121.091, 18.449), (-120.716, 16.343), (-120.716, 16.343), (-120.925, 5.154),(-159.385, 0.323)]



test_square = [(-0.949, -137.545), (1.05, -137.464), (3.048, -137.383), (5.047, -137.302), (7.045, -137.221), (9.043, -137.14), (11.042, -137.06), (13.04, -136.979), (15.038, -136.898), (17.037, -136.817), (19.035, -136.736), (21.033, -136.655), (23.032, -136.574), (25.03, -136.493), (27.028, -136.412), (29.027, -136.331), (31.025, -136.251), (33.024, -136.17), (35.022, -136.089), (37.02, -136.008), (39.019, -135.927), (41.017, -135.846), (43.015, -135.765), (45.014, -135.684), (47.012, -135.603), (49.01, -135.522), (51.009, -135.441), (53.007, -135.361), (55.006, -135.28), (57.004, -135.199), (59.002, -135.118), (61.001, -135.037), (62.999, -134.956), (64.997, -134.875), (66.996, -134.794), (68.994, -134.713), (70.992, -134.632), (72.991, -134.551), (74.989, -134.471), (76.988, -134.39), (78.986, -134.309), (80.984, -134.228), (82.983, -134.147), (84.981, -134.066), (86.979, -133.985), (88.978, -133.904), (90.976, -133.823), (92.974, -133.742), (94.973, -133.662), (96.971, -133.581), (98.97, -133.5), (100.968, -133.419), (102.966, -133.338), (104.965, -133.257), (106.963, -133.176), (108.961, -133.095), (110.96, -133.014), (112.958, -132.933), (114.956, -132.852), (116.2, -132.048), (116.197, -130.048), (116.193, -128.048), (116.189, -126.048), (116.185, -124.048), (116.182, -122.048), (116.178, -120.048), (116.174, -118.048), (116.17, -116.048), (116.166, -114.048), (116.163, -112.048), (116.159, -110.048), (116.155, -108.048), (116.151, -106.048), (116.148, -104.048), (116.144, -102.048), (116.14, -100.048), (116.136, -98.048), (116.132, -96.048), (116.129, -94.048), (116.125, -92.048), (116.121, -90.048), (116.117, -88.048), (116.114, -86.048), (116.11, -84.049), (116.106, -82.049), (116.102, -80.049), (116.098, -78.049), (116.095, -76.049), (116.091, -74.049), (116.087, -72.049), (116.083, -70.049), (116.08, -68.049), (116.076, -66.049), (116.072, -64.049), (116.068, -62.049), (116.065, -60.049), (116.061, -58.049), (116.057, -56.049), (116.053, -54.049), (116.049, -52.049), (116.046, -50.049), (116.042, -48.049), (116.038, -46.049), (116.034, -44.049), (116.031, -42.049), (116.027, -40.049), (116.023, -38.049), (116.019, -36.049), (116.015, -34.049), (116.012, -32.049), (116.008, -30.049), (116.004, -28.049), (116.0, -26.049), (115.997, -24.049), (115.993, -22.049), (115.989, -20.049), (115.985, -18.049), (115.982, -16.049), (115.978, -14.049), (115.974, -12.049), (115.97, -10.049), (115.966, -8.049), (115.963, -6.049), (115.959, -4.049), (115.955, -2.049), (115.951, -0.049), (115.948, 1.951), (115.944, 3.951), (115.94, 5.951), (115.936, 7.951), (115.932, 9.951), (115.929, 11.951), (115.925, 13.951), (115.921, 15.951), (115.917, 17.951), (115.914, 19.951), (115.91, 21.951), (115.906, 23.951), (115.902, 25.951), (115.898, 27.951), (115.895, 29.951), (115.891, 31.951), (115.887, 33.951), (115.883, 35.951), (115.88, 37.951), (115.876, 39.951), (115.872, 41.951), (115.868, 43.951), (115.865, 45.951), (115.861, 47.951), (115.857, 49.951), (115.853, 51.951), (115.849, 53.951), (115.846, 55.951), (115.842, 57.951), (115.838, 59.951), (115.834, 61.951), (115.831, 63.951), (115.827, 65.951), (115.823, 67.951), (115.819, 69.951), (115.815, 71.951), (115.812, 73.951), (115.808, 75.951), (115.804, 77.951), (115.8, 79.951), (115.797, 81.951), (115.793, 83.951), (115.789, 85.951), (115.785, 87.951), (115.782, 89.951), (115.778, 91.951), (115.774, 93.951), (115.77, 95.951), (115.766, 97.951), (115.763, 99.951), (115.759, 101.951), (115.755, 103.951), (115.751, 105.951), (115.748, 107.951), (115.744, 109.951), (115.74, 111.951), (115.736, 113.951), (115.732, 115.951), (115.729, 117.951), (114.35, 118.593), (112.35, 118.622), (110.35, 118.651), (108.35, 118.679), (106.351, 118.708), (104.351, 118.737), (102.351, 118.766), (100.351, 118.794), (98.351, 118.823), (96.352, 118.852), (94.352, 118.881), (92.352, 118.909), (90.352, 118.938), (88.352, 118.967), (86.353, 118.995), (84.353, 119.024), (82.353, 119.053), (80.353, 119.082), (78.353, 119.11), (76.354, 119.139), (74.354, 119.168), (72.354, 119.197), (70.354, 119.225), (68.355, 119.254), (66.355, 119.283), (64.355, 119.312), (62.355, 119.34), (60.355, 119.369), (58.356, 119.398), (56.356, 119.427), (54.356, 119.455), (52.356, 119.484), (50.356, 119.513), (48.357, 119.542), (46.357, 119.57), (44.357, 119.599), (42.357, 119.628), (40.357, 119.657), (38.358, 119.685), (36.358, 119.714), (34.358, 119.743), (32.358, 119.772), (30.358, 119.8), (28.359, 119.829), (26.359, 119.858), (24.359, 119.887), (22.359, 119.915), (20.359, 119.944), (18.36, 119.973), (16.36, 120.002), (14.36, 120.03), (12.36, 120.059), (10.361, 120.088), (8.361, 120.117), (6.361, 120.145), (4.361, 120.174), (2.361, 120.203), (0.362, 120.232), (-1.638, 120.26), (-3.638, 120.289), (-5.638, 120.318), (-7.638, 120.346), (-9.637, 120.375), (-11.637, 120.404), (-13.637, 120.433), (-15.637, 120.461), (-17.637, 120.49), (-19.636, 120.519), (-21.636, 120.548), (-23.636, 120.576), (-25.636, 120.605), (-27.636, 120.634), (-29.635, 120.663), (-31.635, 120.691), (-33.635, 120.72), (-35.635, 120.749), (-37.635, 120.778), (-39.634, 120.806), (-41.634, 120.835), (-43.634, 120.864), (-45.634, 120.893), (-47.633, 120.921), (-49.633, 120.95), (-51.633, 120.979), (-53.633, 121.008), (-55.633, 121.036), (-57.632, 121.065), (-59.632, 121.094), (-61.632, 121.123), (-63.632, 121.151), (-65.632, 121.18), (-67.631, 121.209), (-69.631, 121.238), (-71.631, 121.266), (-73.631, 121.295), (-75.631, 121.324), (-77.63, 121.353), (-79.63, 121.381), (-81.63, 121.41), (-83.63, 121.439), (-85.63, 121.468), (-87.629, 121.496), (-89.629, 121.525), (-91.629, 121.554), (-93.629, 121.582), (-95.629, 121.611), (-97.628, 121.64), (-99.628, 121.669), (-101.628, 121.697), (-103.628, 121.726), (-105.628, 121.755), (-107.627, 121.784), (-109.627, 121.812), (-111.627, 121.841), (-113.627, 121.87), (-115.26, 121.52), (-115.297, 119.52), (-115.334, 117.521), (-115.371, 115.521), (-115.408, 113.521), (-115.445, 111.522), (-115.482, 109.522), (-115.519, 107.522), (-115.556, 105.523), (-115.593, 103.523), (-115.63, 101.524), (-115.667, 99.524), (-115.704, 97.524), (-115.741, 95.525), (-115.778, 93.525), (-115.815, 91.525), (-115.852, 89.526), (-115.888, 87.526), (-115.925, 85.526), (-115.962, 83.527), (-115.999, 81.527), (-116.036, 79.527), (-116.073, 77.528), (-116.11, 75.528), (-116.147, 73.528), (-116.184, 71.529), (-116.221, 69.529), (-116.258, 67.529), (-116.295, 65.53), (-116.332, 63.53), (-116.369, 61.53), (-116.406, 59.531), (-116.443, 57.531), (-116.48, 55.531), (-116.517, 53.532), (-116.554, 51.532), (-116.591, 49.532), (-116.628, 47.533), (-116.665, 45.533), (-116.702, 43.533), (-116.739, 41.534), (-116.776, 39.534), (-116.813, 37.534), (-116.849, 35.535), (-116.886, 33.535), (-116.923, 31.535), (-116.96, 29.536), (-116.997, 27.536), (-117.034, 25.536), (-117.071, 23.537), (-117.108, 21.537), (-117.145, 19.538), (-117.182, 17.538), (-117.219, 15.538), (-117.256, 13.539), (-117.293, 11.539), (-117.33, 9.539), (-117.367, 7.54), (-117.404, 5.54), (-117.441, 3.54), (-117.478, 1.541), (-117.515, -0.459), (-117.552, -2.459), (-117.589, -4.458), (-117.626, -6.458), (-117.663, -8.458), (-117.7, -10.457), (-117.737, -12.457), (-117.774, -14.457), (-117.811, -16.456), (-117.847, -18.456), (-117.884, -20.456), (-117.921, -22.455), (-117.958, -24.455), (-117.995, -26.455), (-118.032, -28.454), (-118.069, -30.454), (-118.106, -32.454), (-118.143, -34.453), (-118.18, -36.453), (-118.217, -38.453), (-118.254, -40.452), (-118.291, -42.452), (-118.328, -44.452), (-118.365, -46.451), (-118.402, -48.451), (-118.439, -50.451), (-118.476, -52.45), (-118.513, -54.45), (-118.55, -56.45), (-118.587, -58.449), (-118.624, -60.449), (-118.661, -62.448), (-118.698, -64.448), (-118.735, -66.448), (-118.772, -68.447), (-118.808, -70.447), (-118.845, -72.447), (-118.882, -74.446), (-118.919, -76.446), (-118.956, -78.446), (-118.993, -80.445), (-119.03, -82.445), (-119.067, -84.445), (-119.104, -86.444), (-119.141, -88.444), (-119.178, -90.444), (-119.215, -92.443), (-119.252, -94.443), (-119.289, -96.443), (-119.326, -98.442), (-119.363, -100.442), (-119.4, -102.442), (-119.437, -104.441), (-119.474, -106.441), (-119.511, -108.441), (-119.548, -110.44), (-119.585, -112.44), (-119.622, -114.44), (-119.659, -116.439), (-119.696, -118.439), (-119.733, -120.439), (-119.77, -122.438), (-119.806, -124.438), (-119.843, -126.438), (-119.88, -128.437), (-119.917, -130.437), (-119.954, -132.437), (-119.991, -134.436), (-118.259, -134.699), (-116.259, -134.699), (-114.259, -134.699), (-112.259, -134.699), (-110.259, -134.699), (-108.259, -134.699), (-106.259, -134.699), (-104.259, -134.699), (-102.259, -134.699), (-100.259, -134.699), (-98.259, -134.699), (-96.259, -134.699), (-94.259, -134.699), (-92.259, -134.699), (-90.259, -134.699), (-88.259, -134.699), (-86.259, -134.699), (-84.259, -134.699), (-82.259, -134.699), (-80.259, -134.699), (-78.259, -134.699), (-76.259, -134.699), (-74.259, -134.699), (-72.259, -134.699), (-70.259, -134.699), (-68.259, -134.699), (-66.259, -134.699), (-64.259, -134.699), (-62.259, -134.699), (-60.259, -134.699), (-58.259, -134.699), (-56.259, -134.699), (-54.259, -134.699), (-52.259, -134.699), (-50.259, -134.699), (-48.259, -134.699), (-46.259, -134.699), (-44.259, -134.699), (-42.259, -134.699), (-40.259, -134.699), (-38.259, -134.699), (-36.259, -134.699), (-34.259, -134.699), (-32.259, -134.699), (-30.259, -134.699), (-28.259, -134.699), (-26.259, -134.699), (-24.259, -134.699), (-22.259, -134.699), (-19.92, -134.699), (-19.92, -134.699)]


#skills_mogo = [(-150.969, 1.664), (-149.031, 2.157), (-147.105, 2.696), (-145.196, 3.293), (-143.306, 3.947), (-141.438, 4.661), (-139.599, 5.447), (-137.793, 6.305), (-136.025, 7.239), (-134.303, 8.256), (-132.635, 9.359), (-131.029, 10.551), (-129.499, 11.838), (-128.052, 13.219), (-126.698, 14.689), (-125.45, 16.252), (-124.31, 17.895), (-123.292, 19.616), (-122.392, 21.402), (-121.614, 23.243), (-120.955, 25.131), (-120.407, 27.055), (-119.966, 29.005), (-119.625, 30.976), (-119.372, 32.959), (-119.198, 34.952), (-119.097, 36.949), (-119.057, 38.948), (-119.07, 40.948), (-119.127, 42.947), (-119.221, 44.945), (-119.341, 46.942), (-119.48, 48.937), (-119.629, 50.931), (-119.777, 52.926), (-119.912, 54.921), (-120.022, 56.918), (-120.089, 58.917), (-120.101, 60.05), (-120.101, 60.05)]

#skills_donuts = [(-121.136, 59.015), (-119.136, 59.034), (-117.137, 59.052), (-115.137, 59.07), (-113.137, 59.089), (-111.137, 59.107), (-109.137, 59.125), (-107.137, 59.144), (-105.137, 59.162), (-103.137, 59.18), (-101.137, 59.199), (-99.137, 59.217), (-97.137, 59.236), (-95.137, 59.254), (-93.138, 59.272), (-91.138, 59.291), (-89.138, 59.309), (-87.138, 59.327), (-85.138, 59.346), (-83.138, 59.364), (-81.138, 59.382), (-79.138, 59.401), (-77.138, 59.419), (-75.138, 59.438), (-73.138, 59.456), (-71.138, 59.474), (-69.139, 59.493), (-67.139, 59.511), (-65.139, 59.529), (-63.139, 59.548), (-61.139, 59.566), (-59.139, 59.584), (-57.139, 59.603), (-56.523, 60.956), (-56.58, 62.955), (-56.641, 64.954), (-56.705, 66.953), (-56.773, 68.952), (-56.844, 70.951), (-56.921, 72.949), (-57.002, 74.947), (-57.088, 76.946), (-57.18, 78.943), (-57.278, 80.941), (-57.382, 82.938), (-57.494, 84.935), (-57.614, 86.932), (-57.742, 88.927), (-57.881, 90.923), (-58.03, 92.917), (-58.191, 94.911), (-58.366, 96.903), (-58.555, 98.894), (-58.758, 100.884), (-58.976, 102.872), (-59.205, 104.859), (-59.437, 106.845), (-59.657, 108.833), (-59.847, 110.824), (-59.991, 112.819), (-60.084, 114.816), (-60.131, 116.816), (-60.138, 118.816), (-60.116, 120.816), (-59.83, 122.771), (-59.157, 124.655), (-58.457, 126.528), (-57.725, 128.389), (-56.956, 130.235), (-56.144, 132.063), (-55.281, 133.867), (-54.357, 135.641), (-53.363, 137.376), (-52.287, 139.062), (-51.114, 140.681), (-49.832, 142.215), (-48.43, 143.641), (-46.903, 144.931), (-45.255, 146.063), (-43.498, 147.017), (-41.657, 147.794), (-39.753, 148.404), (-37.807, 148.866), (-35.836, 149.203), (-33.85, 149.438), (-31.856, 149.592), (-29.858, 149.682), (-27.859, 149.724), (-25.859, 149.729), (-23.859, 149.706), (-21.859, 149.663), (-19.86, 149.606), (-17.861, 149.541), (-15.863, 149.471), (-13.864, 149.399), (-11.865, 149.328), (-9.866, 149.261), (-7.867, 149.198), (-5.868, 149.142), (-3.869, 149.094), (-1.869, 149.054), (0.131, 149.024), (2.131, 149.003), (4.131, 148.993), (6.131, 148.995), (8.131, 149.007), (10.13, 149.031), (12.13, 149.067), (14.13, 149.114), (16.129, 149.173), (18.127, 149.244), (20.126, 149.327), (22.123, 149.422), (22.18, 149.508), (20.181, 149.579), (18.183, 149.655), (16.184, 149.735), (14.186, 149.817), (12.188, 149.9), (10.189, 149.984), (8.191, 150.065), (6.192, 150.143), (4.194, 150.217), (2.195, 150.285), (0.196, 150.347), (-1.803, 150.404), (-3.803, 150.456), (-5.802, 150.503), (-7.802, 150.546), (-9.801, 150.585), (-11.801, 150.62), (-13.801, 150.652), (-15.8, 150.681), (-17.8, 150.707), (-19.8, 150.732), (-21.8, 150.754), (-23.8, 150.774), (-25.8, 150.792), (-27.8, 150.809), (-29.8, 150.824), (-31.8, 150.838), (-33.8, 150.851), (-35.8, 150.863), (-37.799, 150.873), (-39.799, 150.883), (-41.799, 150.892), (-43.799, 150.9), (-45.799, 150.907), (-47.799, 150.913), (-49.799, 150.918), (-51.799, 150.923), (-53.799, 150.927), (-55.799, 150.931), (-57.799, 150.934), (-59.799, 150.937), (-61.799, 150.939), (-63.799, 150.941), (-65.799, 150.942), (-67.799, 150.943), (-69.799, 150.943), (-71.799, 150.943), (-73.799, 150.943), (-75.799, 150.942), (-77.799, 150.941), (-79.799, 150.939), (-81.799, 150.937), (-83.799, 150.935), (-85.799, 150.933), (-87.799, 150.93), (-89.799, 150.927), (-91.799, 150.924), (-93.799, 150.921), (-95.799, 150.917), (-97.799, 150.913), (-99.799, 150.909), (-101.799, 150.905), (-103.799, 150.9), (-105.799, 150.896), (-107.799, 150.891), (-109.799, 150.886), (-111.799, 150.88), (-113.799, 150.875), (-115.799, 150.869), (-117.799, 150.864), (-119.799, 150.858), (-121.799, 150.852), (-123.799, 150.845), (-125.799, 150.839), (-127.799, 150.832), (-129.799, 150.826), (-129.704, 149.421), (-128.941, 147.573), (-128.179, 145.724), (-127.416, 143.875), (-126.654, 142.026), (-125.892, 140.177), (-125.129, 138.328), (-124.367, 136.479), (-123.604, 134.63), (-122.842, 132.781), (-122.079, 130.932), (-121.317, 129.083), (-120.554, 127.234), (-119.792, 125.385), (-119.029, 123.536), (-118.267, 121.687), (-117.504, 119.838), (-116.742, 117.989), (-115.98, 116.14), (-115.217, 114.291), (-114.455, 112.442), (-113.692, 110.593), (-112.93, 108.744), (-112.567, 107.298), (-114.409, 108.077), (-116.251, 108.856), (-118.093, 109.634), (-119.935, 110.413), (-121.778, 111.192), (-123.62, 111.97), (-125.462, 112.749), (-127.304, 113.528), (-129.146, 114.306), (-130.989, 115.085), (-132.831, 115.864), (-134.673, 116.642), (-136.515, 117.421), (-138.357, 118.199), (-140.2, 118.978), (-142.042, 119.757), (-143.884, 120.535), (-145.726, 121.314), (-147.568, 122.093), (-149.411, 122.871), (-151.253, 123.65), (-153.095, 124.429), (-154.937, 125.207), (-155.929, 125.627), (-155.929, 125.627)]


#SKILLS
alliance_stake = [(-159.385, 0.323), (-165, 0), (-100.925, 0.154), (-80.925, 0.154)]

grabbing_mogo = [(-120.483, 5.068), (-120.451, 7.067), (-120.419, 9.067), (-120.387, 11.067), (-120.355, 13.067), (-120.323, 15.066), (-120.291, 17.066), (-120.259, 19.066), (-120.227, 21.066), (-120.195, 23.065), (-120.163, 25.065), (-120.131, 27.065), (-120.099, 29.065), (-120.067, 31.064), (-120.035, 33.064), (-120.003, 35.064), (-119.971, 37.064), (-119.939, 39.063), (-119.907, 41.063), (-119.875, 43.063), (-119.843, 45.063), (-119.811, 47.062), (-119.779, 49.062), (-119.747, 51.062), (-119.715, 53.062), (-119.683, 55.061), (-119.651, 57.061), (-119.619, 59.061), (-119.587, 61.061), (-119.555, 63.06), (-119.523, 65.06), (-119.491, 67.06), (-119.468, 68.533), (-119.468, 68.533)]

first_double_donuts = [(-119.345, 59.459), (-117.346, 59.529), (-115.347, 59.599), (-113.349, 59.669), (-111.35, 59.738), (-109.351, 59.808), (-107.352, 59.878), (-105.354, 59.948), (-103.355, 60.018), (-101.356, 60.088), (-99.357, 60.158), (-97.358, 60.228), (-95.36, 60.298), (-93.361, 60.368), (-91.362, 60.438), (-89.363, 60.508), (-87.365, 60.578), (-85.366, 60.648), (-83.367, 60.718), (-81.368, 60.788), (-79.369, 60.858), (-77.371, 60.928), (-75.372, 60.998), (-73.373, 61.068), (-71.374, 61.138), (-69.376, 61.208), (-67.377, 61.278), (-65.378, 61.348), (-63.379, 61.418), (-61.38, 61.488), (-59.382, 61.558), (-57.383, 61.628), (-55.384, 61.698), (-53.385, 61.768), (-51.387, 61.838), (-49.682, 62.761), (-48.065, 63.938), (-46.449, 65.116), (-44.834, 66.295), (-43.221, 67.478), (-41.611, 68.665), (-40.004, 69.856), (-38.403, 71.054), (-36.808, 72.261), (-35.22, 73.477), (-33.641, 74.704), (-32.074, 75.946), (-30.519, 77.204), (-28.979, 78.481), (-27.457, 79.778), (-25.955, 81.099), (-24.477, 82.446), (-23.024, 83.821), (-21.601, 85.226), (-20.21, 86.663), (-18.854, 88.133), (-17.536, 89.637), (-16.257, 91.175), (-15.02, 92.746), (-13.826, 94.35), (-12.673, 95.985), (-11.563, 97.648), (-10.496, 99.34), (-9.469, 101.056), (-8.48, 102.794), (-7.53, 104.554), (-6.613, 106.331), (-5.73, 108.126), (-4.876, 109.934), (-4.051, 111.756), (-3.252, 113.59), (-2.477, 115.433), (-1.724, 117.286), (-0.99, 119.147), (-0.276, 121.015), (0.422, 122.889), (0.605, 124.856), (0.604, 126.856), (0.602, 128.856), (0.601, 130.856), (0.599, 132.856), (0.597, 134.856), (0.596, 136.856), (0.594, 138.856), (0.592, 140.856), (0.591, 142.856), (0.59, 144.383), (0.59, 144.383)]

robot_rotation = [(0.012, 144.687), (0.019, 142.687), (0.026, 140.687), (0.033, 138.687), (0.04, 136.687), (0.047, 134.687), (0.054, 132.687), (0.061, 130.687), (0.068, 128.687), (0.075, 126.687), (0.082, 124.687), (0.089, 122.687), (0.097, 120.687), (0.104, 118.687), (0.111, 116.687), (0.118, 114.687), (0.125, 112.687), (0.132, 110.687), (0.139, 108.687), (0.146, 106.687), (0.152, 104.925), (0.152, 104.925)]

first_last_four_donuts = [(-14.134, 117.4), (-16.133, 117.35), (-18.132, 117.299), (-20.132, 117.249), (-22.131, 117.198), (-24.13, 117.148), (-26.13, 117.097), (-28.129, 117.047), (-30.129, 116.996), (-32.128, 116.946), (-34.127, 116.895), (-36.127, 116.845), (-38.126, 116.794), (-40.125, 116.744), (-42.125, 116.693), (-44.124, 116.643), (-46.123, 116.592), (-48.123, 116.542), (-50.122, 116.491), (-52.122, 116.441), (-54.121, 116.39), (-56.12, 116.34), (-58.12, 116.289), (-60.119, 116.239), (-62.118, 116.188), (-64.118, 116.138), (-66.117, 116.087), (-68.116, 116.034), (-70.116, 115.976), (-72.115, 115.921), (-74.114, 115.868), (-76.113, 115.817), (-78.113, 115.769), (-80.112, 115.723), (-82.112, 115.681), (-84.111, 115.641), (-86.111, 115.606), (-88.111, 115.574), (-90.111, 115.546), (-92.111, 115.522), (-94.11, 115.504), (-96.11, 115.491), (-98.11, 115.484), (-100.11, 115.484), (-102.11, 115.492), (-104.11, 115.509), (-106.11, 115.537), (-108.11, 115.577), (-110.109, 115.632), (-112.108, 115.704), (-114.105, 115.798), (-116.102, 115.92), (-118.096, 116.076), (-120.086, 116.274), (-122.07, 116.52), (-124.051, 116.801), (-126.031, 117.077), (-128.019, 117.296), (-130.014, 117.444), (-132.012, 117.532), (-134.011, 117.575), (-136.011, 117.584), (-138.011, 117.568), (-140.011, 117.534), (-142.01, 117.485), (-144.009, 117.424), (-146.008, 117.354), (-148.006, 117.275), (-150.005, 117.189), (-152.003, 117.098), (-154.0, 117.002), (-156.737, 116.863), (-156.737, 116.863)]


mogo_triangle =  [(-154.663, 118.262), (-153.485, 116.646), (-152.307, 115.03), (-151.129, 113.413), (-149.951, 111.797), (-148.773, 110.18), (-147.595, 108.564), (-146.418, 106.948), (-145.24, 105.331), (-144.062, 103.715), (-142.884, 102.099), (-141.706, 100.482), (-140.528, 98.866), (-139.35, 97.25), (-138.173, 95.633), (-136.995, 94.017), (-135.817, 92.4), (-134.639, 90.784), (-133.461, 89.168), (-132.283, 87.551), (-131.105, 85.935), (-129.927, 84.319), (-128.75, 82.702), (-127.572, 81.086), (-126.394, 79.47), (-125.216, 77.853), (-124.038, 76.237), (-122.86, 74.62), (-121.682, 73.004), (-120.505, 71.388), (-119.327, 69.771), (-118.149, 68.155), (-116.971, 66.539), (-115.793, 64.922), (-114.615, 63.306), (-113.437, 61.689), (-112.26, 60.073), (-111.082, 58.457), (-109.904, 56.84), (-108.726, 55.224), (-107.548, 53.608), (-106.37, 51.991), (-105.192, 50.375), (-104.015, 48.759), (-102.764, 47.042), (-102.764, 47.042)]

mogo_triangle_2 = [(-103.05, 45.734), (-103.987, 47.501), (-104.925, 49.267), (-105.863, 51.034), (-106.801, 52.8), (-107.739, 54.567), (-108.677, 56.333), (-109.615, 58.1), (-110.553, 59.866), (-111.491, 61.632), (-112.429, 63.399), (-113.366, 65.165), (-114.304, 66.932), (-115.242, 68.698), (-116.18, 70.465), (-117.118, 72.231), (-118.056, 73.998), (-118.994, 75.764), (-119.932, 77.531), (-120.87, 79.297), (-121.808, 81.063), (-122.745, 82.83), (-123.683, 84.596), (-124.621, 86.363), (-125.559, 88.129), (-126.497, 89.896), (-127.435, 91.662), (-128.373, 93.429), (-129.311, 95.195), (-130.249, 96.961), (-131.187, 98.728), (-132.124, 100.494), (-133.062, 102.261), (-134.0, 104.027), (-134.938, 105.794), (-135.876, 107.56), (-136.814, 109.327), (-137.752, 111.093), (-138.69, 112.86), (-139.628, 114.626), (-140.566, 116.392), (-141.503, 118.159), (-142.441, 119.925), (-143.379, 121.692), (-144.317, 123.458), (-145.255, 125.225), (-146.193, 126.991), (-147.131, 128.758), (-148.069, 130.524), (-149.007, 132.29), (-149.945, 134.057), (-151.261, 136.536), (-151.261, 136.536)]


corner_to_mogo = [(-160.86, 161.306), (-160.369, 159.367), (-159.879, 157.428), (-159.388, 155.489), (-158.898, 153.55), (-158.407, 151.611), (-157.917, 149.672), (-157.426, 147.733), (-156.936, 145.795), (-156.445, 143.856), (-155.955, 141.917), (-155.464, 139.978), (-154.974, 138.039), (-154.483, 136.1), (-153.993, 134.161), (-153.502, 132.222), (-153.012, 130.283), (-152.521, 128.344), (-152.031, 126.405), (-151.54, 124.466), (-151.05, 122.528), (-150.559, 120.589), (-150.069, 118.65), (-149.578, 116.711), (-149.088, 114.772), (-148.597, 112.833), (-148.107, 110.894), (-147.616, 108.955), (-147.126, 107.016), (-146.635, 105.077), (-146.145, 103.138), (-145.654, 101.199), (-145.164, 99.261), (-144.673, 97.322), (-144.183, 95.383), (-143.692, 93.444), (-143.202, 91.505), (-142.711, 89.566), (-142.221, 87.627), (-141.73, 85.688), (-141.24, 83.749), (-140.749, 81.81), (-140.259, 79.871), (-139.768, 77.932), (-139.278, 75.994), (-138.787, 74.055), (-138.297, 72.116), (-137.806, 70.177), (-137.316, 68.238), (-136.825, 66.299), (-136.335, 64.36), (-135.844, 62.421), (-135.354, 60.482), (-134.863, 58.543), (-134.373, 56.604), (-133.882, 54.665), (-133.391, 52.727), (-132.939, 50.939), (-132.939, 50.939)]

turn_to_mogo = [(-126.727, 57.152), (-126.617, 55.155), (-126.506, 53.158), (-126.396, 51.161), (-126.285, 49.164), (-126.175, 47.167), (-126.064, 45.17), (-125.953, 43.173), (-125.843, 41.176), (-125.732, 39.179), (-125.622, 37.182), (-125.511, 35.185), (-125.401, 33.188), (-125.29, 31.191), (-125.18, 29.194), (-125.069, 27.197), (-124.958, 25.2), (-124.848, 23.203), (-124.737, 21.207), (-124.627, 19.21), (-124.516, 17.213), (-124.406, 15.216), (-124.295, 13.219), (-124.185, 11.222), (-124.074, 9.225), (-123.963, 7.228), (-123.853, 5.231), (-123.742, 3.234), (-123.632, 1.237), (-123.521, -0.76), (-123.411, -2.757), (-123.3, -4.754), (-123.19, -6.751), (-123.079, -8.748), (-122.968, -10.745), (-122.858, -12.741), (-122.747, -14.738), (-122.637, -16.735), (-122.526, -18.732), (-122.416, -20.729), (-122.305, -22.726), (-122.195, -24.723), (-122.084, -26.72), (-121.974, -28.717), (-121.863, -30.714), (-121.752, -32.711), (-121.642, -34.708), (-121.531, -36.705), (-121.421, -38.702), (-121.31, -40.699), (-121.2, -42.696), (-121.089, -44.693), (-120.979, -46.689), (-120.868, -48.686), (-120.757, -50.683), (-120.647, -52.68), (-120.536, -54.677), (-120.426, -56.674), (-120.27, -59.484), (-120.27, -59.484)]

collect_right_bottom_rings =   [(-118.932, -59.93), (-116.932, -59.945), (-114.932, -59.96), (-112.932, -59.975), (-110.932, -59.991), (-108.932, -60.006), (-106.932, -60.021), (-104.933, -60.036), (-102.933, -60.051), (-100.933, -60.066), (-98.933, -60.081), (-96.933, -60.097), (-94.933, -60.112), (-92.933, -60.127), (-90.933, -60.142), (-88.933, -60.157), (-86.933, -60.172), (-84.933, -60.188), (-82.933, -60.203), (-80.933, -60.218), (-78.933, -60.233), (-76.933, -60.248), (-74.933, -60.263), (-72.933, -60.278), (-70.933, -60.294), (-68.934, -60.309), (-66.934, -60.324), (-64.934, -60.339), (-62.934, -60.354), (-60.934, -60.369), (-59.235, -61.14), (-57.765, -62.496), (-56.283, -63.839), (-54.788, -65.169), (-53.282, -66.484), (-51.762, -67.784), (-50.23, -69.07), (-48.686, -70.341), (-47.13, -71.597), (-45.562, -72.839), (-43.981, -74.064), (-42.388, -75.273), (-40.782, -76.465), (-39.164, -77.641), (-37.535, -78.801), (-35.894, -79.944), (-34.24, -81.068), (-32.575, -82.176), (-30.898, -83.267), (-29.211, -84.34), (-27.511, -85.394), (-25.801, -86.431), (-24.08, -87.451), (-22.349, -88.452), (-20.607, -89.435), (-18.856, -90.401), (-17.095, -91.349), (-15.324, -92.279), (-13.545, -93.192), (-11.757, -94.088), (-9.96, -94.966), (-8.155, -95.828), (-6.343, -96.673), (-4.522, -97.502), (-2.696, -98.316), (-0.861, -99.113), (0.979, -99.896), (2.825, -100.666), (4.677, -101.42), (6.535, -102.161), (8.398, -102.889), (10.265, -103.605), (12.137, -104.309), (14.013, -105.002), (15.893, -105.684), (17.777, -106.357), (19.664, -107.02), (21.554, -107.675), (23.446, -108.321), (25.341, -108.96), (27.238, -109.593), (29.138, -110.22), (31.039, -110.842), (32.941, -111.459), (34.845, -112.072), (36.749, -112.682), (38.655, -113.29), (40.561, -113.896), (42.467, -114.5), (44.374, -115.104), (46.281, -115.708), (48.187, -116.312), (50.093, -116.918), (51.999, -117.526), (53.903, -118.136), (55.807, -118.749), (57.71, -119.365), (59.611, -119.986), (61.511, -120.611), (63.409, -121.241), (65.305, -121.877), (67.2, -122.518), (69.092, -123.165), (70.982, -123.82), (72.869, -124.482), (74.754, -125.151), (78.037, -126.338), (78.037, -126.338)]

collect_right_bottom_rings2 = [(78.037, -126.338), (76.04, -126.448), (74.046, -126.6), (72.056, -126.795), (70.07, -127.03), (68.089, -127.31), (66.116, -127.636), (64.15, -128.002), (62.192, -128.407), (60.243, -128.858), (58.304, -129.348), (56.375, -129.874), (54.457, -130.443), (52.55, -131.045), (50.655, -131.683), (48.77, -132.354), (46.897, -133.054), (45.035, -133.785), (43.184, -134.54), (41.342, -135.321), (39.509, -136.121), (37.685, -136.941), (35.867, -137.775), (34.055, -138.621), (32.247, -139.475), (30.44, -140.333), (28.633, -141.191), (26.825, -142.045), (25.011, -142.888), (23.191, -143.717), (21.361, -144.523), (19.518, -145.301), (17.661, -146.042), (15.786, -146.739), (13.892, -147.38), (11.976, -147.955), (10.039, -148.453), (8.081, -148.86), (6.105, -149.164), (4.114, -149.354), (2.116, -149.419), (0.117, -149.351), (-1.872, -149.146), (-3.842, -148.804), (-5.784, -148.327), (-7.69, -147.722), (-9.554, -146.999), (-11.374, -146.17), (-13.148, -145.247), (-14.871, -144.232), (-16.55, -143.146), (-18.181, -141.988), (-19.773, -140.777), (-21.318, -139.509), (-22.828, -138.197), (-24.303, -136.846), (-25.742, -135.458), (-27.149, -134.037), (-28.528, -132.587), (-29.879, -131.113), (-31.205, -129.616), (-32.507, -128.098), (-33.787, -126.561), (-35.045, -125.007), (-36.285, -123.437), (-37.506, -121.853), (-38.71, -120.256), (-40.027, -118.905), (-42.027, -118.93), (-44.027, -118.955), (-46.027, -118.981), (-48.027, -119.006), (-50.026, -119.032), (-52.026, -119.057), (-54.026, -119.083), (-56.026, -119.108), (-58.026, -119.134), (-60.026, -119.159), (-62.025, -119.184), (-64.025, -119.21), (-66.025, -119.235), (-68.025, -119.261), (-70.025, -119.286), (-72.025, -119.312), (-74.024, -119.337), (-76.024, -119.363), (-78.024, -119.388), (-80.024, -119.413), (-82.024, -119.439), (-84.024, -119.464), (-86.024, -119.49), (-88.023, -119.515), (-90.023, -119.541), (-92.023, -119.566), (-94.023, -119.592), (-96.023, -119.617), (-98.023, -119.643), (-100.022, -119.668), (-102.022, -119.693), (-104.022, -119.719), (-106.022, -119.744), (-108.022, -119.77), (-110.022, -119.795), (-112.021, -119.821), (-114.021, -119.846), (-116.021, -119.872), (-118.021, -119.897), (-120.021, -119.922), (-122.021, -119.948), (-124.02, -119.973), (-126.02, -119.999), (-128.02, -120.024), (-130.02, -120.05), (-132.02, -120.075), (-134.02, -120.101), (-136.019, -120.126), (-138.019, -120.151), (-140.019, -120.177), (-142.019, -120.202), (-144.019, -120.228), (-146.019, -120.253), (-148.019, -120.279), (-150.018, -120.304), (-152.018, -120.33), (-154.018, -120.355), (-156.018, -120.38), (-158.018, -120.406), (-160.167, -120.433), (-160.167, -120.433)]


mogo_to_corner = [(-160.167, -120.433), (-158.167, -120.433), (-156.167, -120.433), (-154.167, -120.433), (-152.167, -120.433), (-150.167, -120.433), (-148.167, -120.433), (-146.167, -120.433), (-144.167, -120.433), (-142.167, -120.433), (-140.167, -120.433), (-138.167, -120.433), (-136.167, -120.433), (-134.167, -120.433), (-132.167, -120.433), (-130.167, -120.433), (-128.167, -120.433), (-126.167, -120.433), (-124.167, -120.433), (-122.167, -120.433), (-120.167, -120.433), (-118.167, -120.433), (-116.167, -120.433), (-114.167, -120.433), (-112.167, -120.433), (-110.167, -120.433), (-108.167, -120.433), (-106.167, -120.433), (-104.167, -120.433), (-102.167, -120.433), (-100.167, -120.433), (-98.167, -120.433), (-96.167, -120.433), (-94.167, -120.433), (-92.167, -120.433), (-90.167, -120.433), (-88.167, -120.433), (-86.167, -120.433), (-84.167, -120.433), (-82.167, -120.433), (-80.167, -120.433), (-78.167, -120.433), (-76.167, -120.433), (-74.167, -120.433), (-72.167, -120.433), (-70.167, -120.433), (-68.167, -120.433), (-66.167, -120.433), (-64.167, -120.433), (-62.167, -120.433), (-60.167, -120.433), (-58.167, -120.433), (-56.167, -120.433), (-54.167, -120.433), (-52.167, -120.433), (-50.167, -120.433), (-48.167, -120.433), (-46.167, -120.433), (-44.167, -120.433), (-42.167, -120.433), (-40.167, -120.433), (-38.167, -120.433), (-36.346, -120.433), (-36.346, -120.433)]

mogo_to_corner2 =  [(-36.346, -120.433), (-38.266, -120.992), (-40.186, -121.55), (-42.107, -122.109), (-44.027, -122.667), (-45.948, -123.225), (-47.868, -123.784), (-49.789, -124.342), (-51.709, -124.901), (-53.63, -125.459), (-55.55, -126.018), (-57.471, -126.576), (-59.391, -127.134), (-61.312, -127.693), (-63.232, -128.251), (-65.152, -128.81), (-67.073, -129.368), (-68.993, -129.927), (-70.914, -130.485), (-72.834, -131.043), (-74.755, -131.602), (-76.675, -132.16), (-78.596, -132.719), (-80.516, -133.277), (-82.437, -133.836), (-84.357, -134.394), (-86.277, -134.952), (-88.198, -135.511), (-90.118, -136.069), (-92.039, -136.628), (-93.959, -137.186), (-95.88, -137.745), (-97.8, -138.303), (-99.721, -138.861), (-101.641, -139.42), (-103.562, -139.978), (-105.482, -140.537), (-107.402, -141.095), (-109.323, -141.654), (-111.243, -142.212), (-113.164, -142.77), (-115.084, -143.329), (-117.005, -143.887), (-118.925, -144.446), (-120.846, -145.004), (-123.205, -145.69), (-130.205, -145.69)]

mogo_in_right_top_corner = [(-118.932, -59.93), (-116.932, -59.945), (-114.932, -59.96), (-112.932, -59.975), (-110.932, -59.991), (-108.932, -60.006), (-106.932, -60.021), (-104.933, -60.036), (-102.933, -60.051), (-100.933, -60.066), (-98.933, -60.081), (-96.933, -60.097), (-94.933, -60.112), (-92.933, -60.127), (-90.933, -60.142), (-88.933, -60.157), (-86.933, -60.172), (-84.933, -60.188), (-82.933, -60.203), (-80.933, -60.218), (-78.933, -60.233), (-76.933, -60.248), (-74.933, -60.263), (-72.933, -60.278), (-70.933, -60.294), (-68.934, -60.309), (-66.934, -60.324), (-64.934, -60.339), (-62.934, -60.354), (-60.934, -60.369), (-59.235, -61.14), (-57.765, -62.496), (-56.283, -63.839), (-54.788, -65.169), (-53.282, -66.484), (-51.762, -67.784), (-50.23, -69.07), (-48.686, -70.341), (-47.13, -71.597), (-45.562, -72.839), (-43.981, -74.064), (-42.388, -75.273), (-40.782, -76.465), (-39.164, -77.641), (-37.535, -78.801), (-35.894, -79.944), (-34.24, -81.068), (-32.575, -82.176), (-30.898, -83.267), (-29.211, -84.34), (-27.511, -85.394), (-25.801, -86.431), (-24.08, -87.451), (-22.349, -88.452), (-20.607, -89.435), (-18.856, -90.401), (-17.095, -91.349), (-15.324, -92.279), (-13.545, -93.192), (-11.757, -94.088), (-9.96, -94.966), (-8.155, -95.828), (-6.343, -96.673), (-4.522, -97.502), (-2.696, -98.316), (-0.861, -99.113), (0.979, -99.896), (2.825, -100.666), (4.677, -101.42), (6.535, -102.161), (8.398, -102.889), (10.265, -103.605), (12.137, -104.309), (14.013, -105.002), (15.893, -105.684), (17.777, -106.357), (19.664, -107.02), (21.554, -107.675), (23.446, -108.321), (25.341, -108.96), (27.238, -109.593), (29.138, -110.22), (31.039, -110.842), (32.941, -111.459), (34.845, -112.072), (36.749, -112.682), (38.655, -113.29), (40.561, -113.896), (42.467, -114.5), (44.374, -115.104), (46.281, -115.708), (48.187, -116.312), (50.093, -116.918), (51.999, -117.526), (53.903, -118.136), (55.807, -118.749), (57.71, -119.365), (59.611, -119.986), (61.511, -120.611), (63.409, -121.241), (65.305, -121.877), (67.2, -122.518), (69.092, -123.165), (70.982, -123.82), (72.869, -124.482), (74.754, -125.151), (78.037, -126.338), (78.037, -126.338)]

mogo_in_right_top_corner2 = [(78.037, -126.338), (76.04, -126.448), (74.046, -126.6), (72.056, -126.795), (70.07, -127.03), (68.089, -127.31), (66.116, -127.636), (64.15, -128.002), (62.192, -128.407), (60.243, -128.858), (58.304, -129.348), (56.375, -129.874), (54.457, -130.443), (52.55, -131.045), (50.655, -131.683), (48.77, -132.354), (46.897, -133.054), (45.035, -133.785), (43.184, -134.54), (41.342, -135.321), (39.509, -136.121), (37.685, -136.941), (35.867, -137.775), (34.055, -138.621), (32.247, -139.475), (30.44, -140.333), (28.633, -141.191), (26.825, -142.045), (25.011, -142.888), (23.191, -143.717), (21.361, -144.523), (19.518, -145.301), (17.661, -146.042), (15.786, -146.739), (13.892, -147.38), (11.976, -147.955), (10.039, -148.453), (8.081, -148.86), (6.105, -149.164), (4.114, -149.354), (2.116, -149.419), (0.117, -149.351), (-1.872, -149.146), (-3.842, -148.804), (-5.784, -148.327), (-7.69, -147.722), (-9.554, -146.999), (-11.374, -146.17), (-13.148, -145.247), (-14.871, -144.232), (-16.55, -143.146), (-18.181, -141.988), (-19.773, -140.777), (-21.318, -139.509), (-22.828, -138.197), (-24.303, -136.846), (-25.742, -135.458), (-27.149, -134.037), (-28.528, -132.587), (-29.879, -131.113), (-31.205, -129.616), (-32.507, -128.098), (-33.787, -126.561), (-35.045, -125.007), (-36.285, -123.437), (-37.506, -121.853), (-38.71, -120.256), (-40.027, -118.905), (-42.027, -118.93), (-44.027, -118.955), (-46.027, -118.981), (-48.027, -119.006), (-50.026, -119.032), (-52.026, -119.057), (-54.026, -119.083), (-56.026, -119.108), (-58.026, -119.134), (-60.026, -119.159), (-62.025, -119.184), (-64.025, -119.21), (-66.025, -119.235), (-68.025, -119.261), (-70.025, -119.286), (-72.025, -119.312), (-74.024, -119.337), (-76.024, -119.363), (-78.024, -119.388), (-80.024, -119.413), (-82.024, -119.439), (-84.024, -119.464), (-86.024, -119.49), (-88.023, -119.515), (-90.023, -119.541), (-92.023, -119.566), (-94.023, -119.592), (-96.023, -119.617), (-98.023, -119.643), (-100.022, -119.668), (-102.022, -119.693), (-104.022, -119.719), (-106.022, -119.744), (-108.022, -119.77), (-110.022, -119.795), (-112.021, -119.821), (-114.021, -119.846), (-116.021, -119.872), (-118.021, -119.897), (-120.021, -119.922), (-122.021, -119.948), (-124.02, -119.973), (-126.02, -119.999), (-128.02, -120.024), (-130.02, -120.05), (-132.02, -120.075), (-134.02, -120.101), (-136.019, -120.126), (-138.019, -120.151), (-140.019, -120.177), (-142.019, -120.202), (-144.019, -120.228), (-146.019, -120.253), (-148.019, -120.279), (-150.018, -120.304), (-152.018, -120.33), (-154.018, -120.355), (-156.018, -120.38), (-158.018, -120.406), (-160.167, -120.433), (-160.167, -120.433)]

#mogo_in_left_top_corner =


# Make random actually random
def initializeRandomSeed():
    wait(100, MSEC)
    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()
    #urandom.seed(int(random))
     
# Set random seed
initializeRandomSeed()


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

#gyro start
gyro = Inertial(Ports.PORT11)
gyro.orientation(OrientationType.YAW)
gyro.calibrate()
gyro.set_rotation(0, DEGREES)
gyro.set_heading(0, DEGREES)
 
 
gear_ratio = 3/4
tolerance = 6
lookahead = 50
current_x = -1
current_y =  -1
previous_right_encoder = 0
previous_left_encoder = 0
forward_velocity = 40
turn_velocity_k = 40
left_velocity = 5
right_velocity = 5
#forward_velocity/100
wheel_circumference = 8.6393798
feet_to_unit = 2.5
gear_ratio = 3/4
current_angle = 0


def leftEncoder():
    return left_drive_smart.position(DEGREES)
 
def rightEncoder():
    return right_drive_smart.position(DEGREES)
 
def update_position():
    global current_x, current_y, current_angle, previous_left_encoder, previous_right_encoder
   
    # Calculate the distance traveled by each wheel
    left_encoder = ((leftEncoder() / 360) * wheel_circumference * gear_ratio) * feet_to_unit
    right_encoder = ((rightEncoder() / 360) * wheel_circumference * gear_ratio) * feet_to_unit
    delta_left = left_encoder - previous_left_encoder
    delta_right = right_encoder - previous_right_encoder
    #print("delta_left: "+ str(delta_left)+" delta_rhgt: " + str(delta_right) + " left_enc: " + str(left_encoder) + " right_enc: " + str(right_encoder))
    # Update previous encoder values
    previous_left_encoder = left_encoder
    previous_right_encoder = right_encoder
   
    current_angle = 2* math.pi - math.radians(gyro.heading(DEGREES))
   
    # Calculate the robot's linear change
    delta_d = (delta_left + delta_right) / 2
   
    current_y += delta_d * math.sin(current_angle)
    current_x += delta_d * math.cos(current_angle)
    #print("x: "+ str(current_x)+" y: " + str(current_y) + " angle: " + str(current_angle))
 
def calculate_lookahead_point(points_list, lookahead_distance):
    global current_x, current_y, start_pos_size, forward_velocity, tolerance
    closest_offset = -1
    lookahead_offset = -1
    closest_distance = float('inf')

    #if len(points_list) == 0:
    #    return
    min_distance = float('inf')
    min_index = -1  # To keep track of the nearest valid point index

    num_points = len(points_list)  # Number of points to check
    for i in range(num_points-1):
        dist = math.sqrt((points_list[i][0] - current_x) ** 2 + (points_list[i][1] - current_y) ** 2)    
        if dist < tolerance:
            min_index = i
        else:
            break
    if min_index != -1:
        del points_list[:min_index]
        min_index = -1
        num_points = len(points_list)  # Number of points to check

    if len(points_list) == 0:
        return
    lookahead_point = None
    closest_point = points_list[0]
    for i in range(num_points-1):
        start = points_list[i]
        end = points_list[i + 1]
        segment_length = math.sqrt((end[0] - start[0]) ** 2 + (end[1] - start[1]) ** 2)
        if segment_length == 0:
            continue
        t = ((current_x - start[0]) * (end[0] - start[0]) + (current_y - start[1]) * (end[1] - start[1])) / segment_length ** 2
        t = max(0, min(1, t))
        closest_x = start[0] + t * (end[0] - start[0])
        closest_y = start[1] + t * (end[1] - start[1])
        distance = math.sqrt((closest_x - current_x) ** 2 + (closest_y - current_y) ** 2)

        if len(points_list) == 2 and distance <  2* tolerance:
            closest_point = (points_list[1][0], points_list[1][1])
            del points_list[0]
            break

        if distance < closest_distance:
            closest_distance = distance
            closest_offset = i
            closest_point = (closest_x, closest_y)

        if distance >= lookahead_distance:
            lookahead_offset = i
            lookahead_point = (closest_x, closest_y)
            break

    if closest_offset > 0 and lookahead_point is None:
        #print("Dropping1 :" + str(points_list[:closest_offset]))
        del points_list[:closest_offset]
        closest_offset = 0
    if lookahead_point:
        #print("Dropping2 :" + str(points_list[:lookahead_offset]))
        del points_list[:lookahead_offset]
    return lookahead_point if lookahead_point else closest_point

# Function to calculate drive speeds
def calculate_drive_speeds(lookahead_point, direction):
    global current_x, current_y, current_angle, left_velocity, right_velocity, forward_velocity, turn_velocity_k
    dx = lookahead_point[0] - current_x
    dy = lookahead_point[1] - current_y

    # Calculate the angle to the target point
    point_angle = math.atan2(dy, dx)
   
    # Adjust the current angle based on the direction
    adjusted_current_angle = current_angle
    if direction == -1:
        adjusted_current_angle += math.pi  # Add 180 degrees (π radians) to the current angle

    # Normalize the adjusted current angle to be within the range [-π, π]
    adjusted_current_angle = (adjusted_current_angle + math.pi) % (2 * math.pi) - math.pi

    # Calculate the angle difference between the adjusted current heading and the target point
    point_angle_diff = point_angle - adjusted_current_angle


    # Normalize the angle difference to be within the range [-π, π]
    if point_angle_diff > math.pi:
        point_angle_diff -= 2 * math.pi
    elif point_angle_diff < -math.pi:
        point_angle_diff += 2 * math.pi

    #point_angle_diff = (point_angle_diff + math.pi) % (2 * math.pi) - math.pi

    # Calculate the wheel velocities based on the specified direction
    curr_forward_velocity = forward_velocity * direction
    curr_turn_velocity_k = turn_velocity_k
    left_velocity = curr_forward_velocity - point_angle_diff * curr_turn_velocity_k
    right_velocity = curr_forward_velocity + point_angle_diff * curr_turn_velocity_k

    # Clamp the velocities to the range [-100, 100]
    left_velocity = max(min(left_velocity, 100), -100)
    right_velocity = max(min(right_velocity, 100), -100)


def walk_path(points_list, lookahead_distance, stop_threshold, direction):
    global current_x, current_y, start_pos_size, forward_velocity, turn_velocity_k, left_velocity, right_velocity

    start_pos_size = len(points_list)

    if current_x == -1:
        current_x = points_list[0][0]
        current_y = points_list[0][1]

    running = True
    while running:
        adjust_high_scoring_motor_position()
        stall_detection_and_handling()
        if len(points_list) == 1:
            running = False
            break

        # Calculate the lookahead point
        next_point = calculate_lookahead_point(points_list, lookahead_distance)

        # Calculate drive speeds based on the specified direction
        calculate_drive_speeds(next_point, direction)
        print("x: "+ str(current_x)+" y: " + str(current_y) + " angle: " + str(current_angle) + " lspeed" + str(left_velocity) + " rspeed" + str(right_velocity))

        # Update the robot's position
        update_position()

        # Check if the robot has reached the current target point
        distance_to_point = math.sqrt((points_list[0][0] - current_x) ** 2 + (points_list[0][1] - current_y) ** 2)
        if distance_to_point < stop_threshold:  # Adjust the threshold as needed
            points_list.pop(0)  # Remove the reached point

        # Check if the robot has reached the last point
        if len(points_list) == 0:
            final_distance = math.sqrt((points_list[-1][0] - current_x) ** 2 + (points_list[-1][1] - current_y) ** 2)
            if final_distance < stop_threshold:
                running = False

        # Set motor velocities
        left_drive_smart.set_velocity(left_velocity, PERCENT)
        left_drive_smart.spin(FORWARD)
        right_drive_smart.set_velocity(right_velocity, PERCENT)
        right_drive_smart.spin(FORWARD)

        wait(20, MSEC)

    # Stop motors when path is complete
    left_drive_smart.stop()
    right_drive_smart.stop()

def autonomous_sample():
    global current_x, current_y, current_angle
    print("Starting autonomous sample")
    while True:
        update_position()
        print("x: "+ str(current_x)+" y: " + str(current_y) + " angle: " + str(current_angle))
        wait(1, SECONDS)

def autonomous_blue_right():
    autonomous_more_donuts_side(blue_right_tomogo, blue_right_tofirststack, blue_right_totower)

def autonomous_red_left():
    autonomous_more_donuts_side(red_left_tomogo, red_left_tofirststack, red_left_totower)

def autonomous_red_right():
    autonomous_extra_mogo_side(None, None)  #red_right_tomogo*/, nul /*red_right_tofirststack*
       
def autonomous_blue_left():
    pass

def autonomous_extra_mogo_side(tomogo, tofirststack):
    autonomous_empty()

def autonomous_more_donuts_side(tomogo, tofirststack, last_two):
    global intake_state, lookahead

    #pick up intake so ramps drop
    intake_p.set(True)

    # Bring up high scoring motor
    high_score_target_angle = 75
    adjust_high_scoring_motor_position()

    # go to mogo
    walk_path(tomogo, lookahead, tolerance, -1)
    # Capture the mogo
    mogo_p.set(True)

    # start intake to pick up the top donut including the stall code
    intake_state = IntakeState.RUNNING
    set_intake_motor_state(REVERSE)

    # Bring down the intake to knock off the top donut
    intake_p.set(False)
    update_position()
    intake_p.set(True)
    wait(250, MSEC)
    intake_p.set(False)
    walk_path(tofirststack, lookahead, tolerance, 1)
    update_position()
    lookahead = 20
    walk_path(last_two, lookahead, tolerance, -1)

# driver.py

# Function to display joystick positions (optional)
def display_joystick_positions():
    brain.screen.clear_screen()
    brain.screen.set_cursor(1, 1)
    #joystick_positions = f"{int(controller_1.axis3.position())} {int(controller_1.axis2.position())}"
    #brain.screen.print(joystick_positions)
    wait(0.1, SECONDS)

def scale_joystick_input(input_value):
    # Normalize the input to the range [-1, 1]
    normalized_input = input_value / 100.0
    # Apply cubic scaling
    scaled_input = normalized_input ** 3
    # Scale back to the range [-100, 100]
    return scaled_input * 100

# Function to set drive motor velocities based on controller input
def set_drive_motor_velocities():
    global reverse_drive
    if controller_1.buttonA.pressing():
        reverse_drive = not reverse_drive
        while controller_1.buttonA.pressing():
            wait(10, MSEC)

    if reverse_drive:
        # Reverse joystick inputs
        left_joystick_y = -controller_1.axis2.position()
        right_joystick_y = -controller_1.axis3.position()
    else:
        # Normal control
        left_joystick_y = controller_1.axis3.position()
        right_joystick_y = controller_1.axis2.position()

    # Apply scaling to joystick inputs
    left_joystick_y = scale_joystick_input(left_joystick_y)
    right_joystick_y = scale_joystick_input(right_joystick_y)

    # Set velocities for left and right drive motors
    left_drive_smart.set_velocity(left_joystick_y, PERCENT)
    if abs(left_joystick_y) < 5:
        left_drive_smart.stop()
    else:
        left_drive_smart.spin(FORWARD)

    right_drive_smart.set_velocity(right_joystick_y, PERCENT)
    if abs(right_joystick_y) < 5:
        right_drive_smart.stop()
    else:
        right_drive_smart.spin(FORWARD)
       
# Function to toggle the high scoring motor
def toggle_high_scoring_motor():
    global high_scoring_running, high_score_target_angle
    if controller_1.buttonLeft.pressing():
        high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_SCORE
        high_scoring_running = False
        while controller_1.buttonLeft.pressing():
            wait(10, MSEC)

    if controller_1.buttonUp.pressing():
        high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_WAIT
        high_scoring_running = False
        while controller_1.buttonLeft.pressing():
            wait(10, MSEC)

    if controller_1.buttonRight.pressing():
        high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_CAPTURE
        high_scoring_running = True
        while controller_1.buttonLeft.pressing():
            wait(10, MSEC)

    if controller_1.buttonDown.pressing():
        high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_DOWN
        high_scoring_running = False
        while controller_1.buttonDown.pressing():
            wait(10, MSEC)

# Function to toggle the intake motor
def toggle_intake_motor():
    global intake_state
    global consecutive_stall_count, retry_count, high_score_stall
    global intake_running

    if controller_1.buttonR1.pressing():

        intake_state = IntakeState.RUNNING if intake_state == IntakeState.STOPPED else IntakeState.STOPPED
        consecutive_stall_count = 0
        retry_count = 0
        high_score_stall = False        

        set_intake_motor_state(FORWARD)
        wait(100, MSEC)  # Debounce delay
        while controller_1.buttonR1.pressing():
            wait(100, MSEC)

    if controller_1.buttonR2.pressing():
        intake_state = IntakeState.RUNNING if intake_state == IntakeState.STOPPED else IntakeState.STOPPED
        consecutive_stall_count = 0
        retry_count = 0
        high_score_stall = False        
        set_intake_motor_state(REVERSE)
        wait(100, MSEC)  # Debounce delay
        while controller_1.buttonR2.pressing():
            wait(100, MSEC)

# Function to handle digital outputs based on controller buttons
def handle_digital_outputs():
    if controller_1.buttonL1.pressing():
        print("Mogo 1")
        mogo_p.set(False)
    if controller_1.buttonL2.pressing():
        print("Mogo 2")
        mogo_p.set(True)
    if controller_1.buttonX.pressing():
        intake_p.set(not intake_p.value())
    if controller_1.buttonY.pressing():
        donker.set(True)
    if controller_1.buttonB.pressing():
        donker.set(False)

# Autonomous function
def autonomous():
    # Autonomous code
    # For example, move forward for a certain distance
    # define a variable slot_no and switch case based on the slot_no
    # to run the corresponding autonomous routine
    #wait(3, SECONDS)
    slot_no = 4
    if slot_no == 1:
        gyro.set_heading(180, DEGREES)
        autonomous_empty()
    elif slot_no == 2:
        gyro.set_heading(180, DEGREES)
        autonomous_blue_right()
    elif slot_no == 3:
        gyro.set_heading(0, DEGREES)
        autonomous_empty()
    elif slot_no == 4:
        gyro.set_heading(180, DEGREES)
        autonomous_red_left()
    elif slot_no == 5:
        gyro.set_heading(0, DEGREES)

        left_drive_smart.spin_to_position(((38/(2.75*(math.pi)))*360), DEGREES, 100, PERCENT)
        right_drive_smart.spin_to_position(((38/(2.75*(math.pi)))*360), DEGREES, 100, PERCENT)
        left_drive_smart.stop()
        right_drive_smart.stop()
        mogo_p.set(True)
        intake_lower.set_velocity(100, PERCENT)
        intake_upper.set_velocity(100, PERCENT)  
# Driver control function
def drivercontrol():
    # Main control loop for driver control
    while True:
        set_drive_motor_velocities()
        toggle_high_scoring_motor()
        adjust_high_scoring_motor_position()
        toggle_intake_motor()
        handle_digital_outputs()
        stall_detection_and_handling()
        wait(20, MSEC)

def autonomous_empty():
    left_drive_smart.set_velocity(95, PERCENT)
    right_drive_smart.set_velocity(95, PERCENT)
    left_drive_smart.spin(FORWARD)
    right_drive_smart.spin(FORWARD)
    wait(200, MSEC)
    left_drive_smart.stop()
    right_drive_smart.stop()

def autonomous_test():
    global lookahead, tolerance, increasing_x, test_square, intake_state, high_score_target_angle, test_circle, gyro
    #walk_path(increasing_x, lookahead, tolerance, 1)
    #mogo_p.set(True)
    #wait(1, SECONDS)
    #high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_WAIT
    #adjust_high_scoring_motor_position()
    #intake_state = IntakeState.RUNNING  
    #set_intake_motor_state(REVERSE)
    #gyro.set_heading(180, DEGREES)
    # Reverse the test_circle path
    reversed_test_circle = test_circle[::-1]


    #walk_path(reversed_test_circle, lookahead, tolerance, 1)
   
    high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_WAIT
    adjust_high_scoring_motor_position()
    intake_state = IntakeState.RUNNING
    wait(100, MSEC)
    set_intake_motor_state(REVERSE)
    wait(1000, MSEC)

    walk_path(alliance_stake, 5, tolerance, 1)
    print("alliance done with turning")
    walk_path(grabbing_mogo, lookahead, tolerance, -1)
    print("grabbing done with turning")
    mogo_p.set(True)
    wait(50, MSEC)
    walk_path(first_double_donuts, lookahead, tolerance, 1)
    walk_path(robot_rotation, lookahead, 6, -1)
    walk_path(first_last_four_donuts, lookahead, tolerance, 1)
    walk_path(mogo_triangle, lookahead, 6, -1)
    walk_path(mogo_triangle_2, lookahead, 6, -1)
    mogo_p.set(False)
    walk_path(corner_to_mogo, lookahead, tolerance, 1)
    walk_path(turn_to_mogo, lookahead, tolerance, -1)
    mogo_p.set(True)
    walk_path(collect_right_bottom_rings, lookahead , tolerance, 1)
    walk_path(collect_right_bottom_rings2, lookahead , tolerance, 1)

   
    walk_path(mogo_to_corner, lookahead, tolerance, -1)
    walk_path(mogo_to_corner2, lookahead, tolerance, -1)
    mogo_p.set(False)
    walk_path(mogo_in_right_top_corner, lookahead, tolerance, 1)
    walk_path(mogo_in_right_top_corner2, lookahead, tolerance, -1)

    #walk_path(test_circle, lookahead, tolerance, 1)
   
   
def unscoring():
    print("Hi")

# Create a Competition object
#competition = Competition(drivercontrol, autonomous)
def main():
    # Any initialization code before the match starts
    print("Running main.py")
    wait(3, SECONDS)
    #mogo_p.set(False)
    #intake_p.set(True)
    #autonomous()
    autonomous_test()
    #intake_p.set(True)
    #drive
    #unscoring()

main()